/*
0 -> 1 true
0 -> <- 1 false

有向 + 无环

*/

class Solution {
    public boolean canFinish(int numCourses, int[][] prerequisites) {
    
     //用入度来统计它有几个前置课程
        int[] indegree = new int[numCourses];
        List[] edges = new ArrayList[numCourses];//记录每门先修课都有谁
        
        //为每门课开一个list存放它作为先修课的课程pointer
        for(int i = 0; i <numCourses; i++){
            edges[i] = new ArrayList<Integer>();
        }
        
        //把先修课放进到每个课程的list里 & 统计入度数量
        for(int i = 0; i < prerequisites.length; i++){
            //先修课+当前课程：学了前面的课，才可以学后面的课 1把2，4放进去
            edges[prerequisites[i][1]].add(prerequisites[i][0]);
                  //统计后面的课的indegree ++ 2，4这个位置 入度++ 因为有1的存在
                  indegree[prerequisites[i][0]]++;
        }
        //BFS
        Queue queue = new LinkedList();
        //统计入度的数量
        for(int i = 0; i < indegree.length; i++){
            //没有先修课，直接放入
            if(indegree[i] == 0){
                queue.offer(i);
            }
        }
                  
        int cnt = 0; //统计一共上过的课程的数量
        while(!queue.isEmpty()){
            //处理了一个课了 cnt ++
            int course = (int)queue.poll();
            cnt++;
            //有n门课以前的course作为先修课， course -> n门其他课
            int n = edges[course].size();
            //遍历以当前课程作为先修课的
            for(int i = 0; i < n; i++){
                //因为已经修了当前课程了，所以pointer --
                int pointer = (int)edges[course].get(i);
                indegree[pointer] --;
                //判断poniter课入度是否为0
                if(indegree[pointer] == 0){
                    queue.add(pointer);
                }
            }
        }
        //如果统计结果和课程数目一样，说明上完所有的课程，反之没上完，不能通过先修课的规则上完所有的课程
        return cnt == numCourses;
       
    }
}
