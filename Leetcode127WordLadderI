//每一次变换一个字母；必须出现在wordlist中

class Solution {
    public int ladderLength(String beginWord, String endWord, List<String> wordList) {
        //把给定的wordList先放进hashset中
        //wordList = ["hot","dot","dog","lot","log","cog"]
        Set<String> set = new HashSet<>(wordList);
        //用queue来模拟BFS的过程
        Queue<String> queue = new LinkedList<>();
        queue.add(beginWord);
        //记录当前的path的长度
        int level = 0;
        while(!queue.isEmpty()){
            int size = queue.size();
            for(int i = 0; i < size; i++){
                String cur = queue.remove();
                //把当前wordList变成toChatArray有利于变化字母
                char[] wordUnit = cur.toCharArray();
                //如果找到了想找到的endword，就return level + 1
                if(cur.equals(endWord)){
                    return level + 1;
                }
                //如果没有找到立足于当前的hit来继续找
                for(int j = 0; j < cur.length(); j++){
                    //用temp来存当前的h
                    char temp = wordUnit[j];
                    //指向letter h,把字母换为a到z的各种可能性 ait - zit
                    //如果当前的ait到zit不满足条件，回到之前的for loop;
                    //指针j继续向后移动到hit的i;还是用temp来存i,重新查新词是否在wordlist中
                    for(char c ='a'; c <= 'z'; c++){
                        wordUnit[j] = c;
                        String s = new String(wordUnit);
                        //如果存在比如hot;把valid neigbor放到queue中；并且在set中去重
                        //因为会再次出现hit的情况
                        if(set.contains(s)){
                            queue.add(s);
                            set.remove(s);
                        }
                    }
                    wordUnit[j] = temp;
                }
            }
            //找到hot后，level 0结束， 要level++ 然后立足于hot再不断找符合条件的词
            level++;
        }
        return 0;
    }
}
